'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré à partir d'un modèle.
'
'     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
'     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure
Imports System.Data.Entity.Core.Objects
Imports System.Linq

Partial Public Class MES_Digital_FactoryEntities
    Inherits DbContext

    Public Sub New()
        MyBase.New("name=MES_Digital_FactoryEntities")
    End Sub

    Protected Overrides Sub OnModelCreating(modelBuilder As DbModelBuilder)
        Throw New UnintentionalCodeFirstException()
    End Sub

    Public Overridable Property DTM_ETP_WKF_OLD() As DbSet(Of DTM_ETP_WKF_OLD)
    Public Overridable Property DTM_GST_CNTR() As DbSet(Of DTM_GST_CNTR)
    Public Overridable Property DTM_GST_MOY_OLD() As DbSet(Of DTM_GST_MOY_OLD)
    Public Overridable Property DTM_GST_OUTI() As DbSet(Of DTM_GST_OUTI)
    Public Overridable Property DTM_HIST_MTRE() As DbSet(Of DTM_HIST_MTRE)
    Public Overridable Property DTM_LST_CNTR() As DbSet(Of DTM_LST_CNTR)
    Public Overridable Property DTM_NM_SN_ENS() As DbSet(Of DTM_NM_SN_ENS)
    Public Overridable Property DTM_OLD_TCBL_COMP() As DbSet(Of DTM_OLD_TCBL_COMP)
    Public Overridable Property DTM_PSG() As DbSet(Of DTM_PSG)
    Public Overridable Property DTM_PSG_OUTI() As DbSet(Of DTM_PSG_OUTI)
    Public Overridable Property DTM_REF_ENS() As DbSet(Of DTM_REF_ENS)
    Public Overridable Property DTM_REF_PST_IMPR_OLD() As DbSet(Of DTM_REF_PST_IMPR_OLD)
    Public Overridable Property DTM_TR_CPT() As DbSet(Of DTM_TR_CPT)
    Public Overridable Property DTM_TST_RPRT() As DbSet(Of DTM_TST_RPRT)
    Public Overridable Property DTM_TST_VAL() As DbSet(Of DTM_TST_VAL)
    Public Overridable Property TMP_PST_FLAN() As DbSet(Of TMP_PST_FLAN)
    Public Overridable Property TMP_PST_NMCL() As DbSet(Of TMP_PST_NMCL)
    Public Overridable Property DTM_REF_ID() As DbSet(Of DTM_REF_ID)
    Public Overridable Property TMP_PST_OUTI() As DbSet(Of TMP_PST_OUTI)
    Public Overridable Property C_old_V_CLSG_RAPP_TCBL() As DbSet(Of C_old_V_CLSG_RAPP_TCBL)
    Public Overridable Property ID_Conteneur_View() As DbSet(Of ID_Conteneur_View)
    Public Overridable Property V_CFGR_ARTI_ECO() As DbSet(Of V_CFGR_ARTI_ECO)
    Public Overridable Property V_CFGR_CLIE() As DbSet(Of V_CFGR_CLIE)
    Public Overridable Property V_CLSG_PRD_DTM_HIST_LIVR() As DbSet(Of V_CLSG_PRD_DTM_HIST_LIVR)
    Public Overridable Property V_CLSG_PRD_DTM_REF_ARTI_FT() As DbSet(Of V_CLSG_PRD_DTM_REF_ARTI_FT)
    Public Overridable Property V_CLSG_PRD_DTM_REF_OPTN_CLI() As DbSet(Of V_CLSG_PRD_DTM_REF_OPTN_CLI)
    Public Overridable Property V_CLSG_PRD_DTM_REF_PST() As DbSet(Of V_CLSG_PRD_DTM_REF_PST)
    Public Overridable Property V_DER_DTM_PSG_PAR_LB_ETP() As DbSet(Of V_DER_DTM_PSG_PAR_LB_ETP)
    Public Overridable Property V_DTM_LST_CNTR() As DbSet(Of V_DTM_LST_CNTR)
    Public Overridable Property V_DTM_REF_ENS() As DbSet(Of V_DTM_REF_ENS)
    Public Overridable Property V_DTM_TAKA() As DbSet(Of V_DTM_TAKA)
    Public Overridable Property V_DTM_TEST_FONC_NOM_TEST() As DbSet(Of V_DTM_TEST_FONC_NOM_TEST)
    Public Overridable Property V_DTM_TEST_FONC_RAPP() As DbSet(Of V_DTM_TEST_FONC_RAPP)
    Public Overridable Property V_DTM_TEST_FONC_VAL() As DbSet(Of V_DTM_TEST_FONC_VAL)
    Public Overridable Property V_LIST_CONT_NON_VIDE() As DbSet(Of V_LIST_CONT_NON_VIDE)
    Public Overridable Property V_LIST_LIAI_NU_SER_ECO_NU_SER_CLIE() As DbSet(Of V_LIST_LIAI_NU_SER_ECO_NU_SER_CLIE)
    Public Overridable Property V_LIST_TEST_ODS_TEST_FONC_VAL() As DbSet(Of V_LIST_TEST_ODS_TEST_FONC_VAL)
    Public Overridable Property V_NEOE_NU_SER_ECO_NU_SER_SS_ENS() As DbSet(Of V_NEOE_NU_SER_ECO_NU_SER_SS_ENS)
    Public Overridable Property V_NEOE_TRAC_ENS_SS_ENSE() As DbSet(Of V_NEOE_TRAC_ENS_SS_ENSE)
    Public Overridable Property V_NEW_PSG_ODS_TEST_FONC_RAPP() As DbSet(Of V_NEW_PSG_ODS_TEST_FONC_RAPP)
    Public Overridable Property V_NEW_RAPP_ODS_TEST_FONC_RAPP() As DbSet(Of V_NEW_RAPP_ODS_TEST_FONC_RAPP)
    Public Overridable Property V_NEW_TEST_ODS_TEST_FONC_VAL() As DbSet(Of V_NEW_TEST_ODS_TEST_FONC_VAL)
    Public Overridable Property V_NEW_VALE_ODS_TEST_FONC_VAL() As DbSet(Of V_NEW_VALE_ODS_TEST_FONC_VAL)
    Public Overridable Property V_RSLT_POIN_ARRE_TCBL_OPRT() As DbSet(Of V_RSLT_POIN_ARRE_TCBL_OPRT)
    Public Overridable Property V_SERE_ARTI() As DbSet(Of V_SERE_ARTI)
    Public Overridable Property V_TAE_TCBL_HSRQ_STAT_PROD() As DbSet(Of V_TAE_TCBL_HSRQ_STAT_PROD)
    Public Overridable Property V_TAE_TCBL_NMCT_UNIT_PROD() As DbSet(Of V_TAE_TCBL_NMCT_UNIT_PROD)
    Public Overridable Property sysdiagrams() As DbSet(Of sysdiagram)

    <DbFunction("MES_Digital_FactoryEntities", "F_IDCT_PASS")>
    Public Overridable Function F_IDCT_PASS(dT_DEB As Nullable(Of Date), dT_FIN As Nullable(Of Date), [oF] As String, cD_ARTI_ECO As String) As IQueryable(Of F_IDCT_PASS_Result)
        Dim dT_DEBParameter As ObjectParameter = If(dT_DEB.HasValue, New ObjectParameter("DT_DEB", dT_DEB), New ObjectParameter("DT_DEB", GetType(Date)))

        Dim dT_FINParameter As ObjectParameter = If(dT_FIN.HasValue, New ObjectParameter("DT_FIN", dT_FIN), New ObjectParameter("DT_FIN", GetType(Date)))

        Dim oFParameter As ObjectParameter = If([oF] IsNot Nothing, New ObjectParameter("OF", [oF]), New ObjectParameter("OF", GetType(String)))

        Dim cD_ARTI_ECOParameter As ObjectParameter = If(cD_ARTI_ECO IsNot Nothing, New ObjectParameter("CD_ARTI_ECO", cD_ARTI_ECO), New ObjectParameter("CD_ARTI_ECO", GetType(String)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of F_IDCT_PASS_Result)("[MES_Digital_FactoryEntities].[F_IDCT_PASS](@DT_DEB, @DT_FIN, @OF, @CD_ARTI_ECO)", dT_DEBParameter, dT_FINParameter, oFParameter, cD_ARTI_ECOParameter)
    End Function

    Public Overridable Function Ajout_Gestion_Conteneur(n_Conteneur As String, preparateur As String, iD_cpt As String, qte_Init As Nullable(Of Single), [oF] As Nullable(Of Integer), code_SAP_cpt As String, result As ObjectParameter) As Integer
        Dim n_ConteneurParameter As ObjectParameter = If(n_Conteneur IsNot Nothing, New ObjectParameter("N_Conteneur", n_Conteneur), New ObjectParameter("N_Conteneur", GetType(String)))

        Dim preparateurParameter As ObjectParameter = If(preparateur IsNot Nothing, New ObjectParameter("Preparateur", preparateur), New ObjectParameter("Preparateur", GetType(String)))

        Dim iD_cptParameter As ObjectParameter = If(iD_cpt IsNot Nothing, New ObjectParameter("ID_cpt", iD_cpt), New ObjectParameter("ID_cpt", GetType(String)))

        Dim qte_InitParameter As ObjectParameter = If(qte_Init.HasValue, New ObjectParameter("Qte_Init", qte_Init), New ObjectParameter("Qte_Init", GetType(Single)))

        Dim oFParameter As ObjectParameter = If([oF].HasValue, New ObjectParameter("OF", [oF]), New ObjectParameter("OF", GetType(Integer)))

        Dim code_SAP_cptParameter As ObjectParameter = If(code_SAP_cpt IsNot Nothing, New ObjectParameter("Code_SAP_cpt", code_SAP_cpt), New ObjectParameter("Code_SAP_cpt", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("Ajout_Gestion_Conteneur", n_ConteneurParameter, preparateurParameter, iD_cptParameter, qte_InitParameter, oFParameter, code_SAP_cptParameter, result)
    End Function

    Public Overridable Function Ajout_Traca_Matiere_Matricule_Passage(etape As String, iD_PF As String, matricule As Nullable(Of Short), result As ObjectParameter) As Integer
        Dim etapeParameter As ObjectParameter = If(etape IsNot Nothing, New ObjectParameter("Etape", etape), New ObjectParameter("Etape", GetType(String)))

        Dim iD_PFParameter As ObjectParameter = If(iD_PF IsNot Nothing, New ObjectParameter("ID_PF", iD_PF), New ObjectParameter("ID_PF", GetType(String)))

        Dim matriculeParameter As ObjectParameter = If(matricule.HasValue, New ObjectParameter("matricule", matricule), New ObjectParameter("matricule", GetType(Short)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("Ajout_Traca_Matiere_Matricule_Passage", etapeParameter, iD_PFParameter, matriculeParameter, result)
    End Function

    Public Overridable Function Ajout_Traca_Matiere_NS(iD_PF As String, iD_CPT As String, iD_Passage As String, repere As String, result As ObjectParameter) As Integer
        Dim iD_PFParameter As ObjectParameter = If(iD_PF IsNot Nothing, New ObjectParameter("ID_PF", iD_PF), New ObjectParameter("ID_PF", GetType(String)))

        Dim iD_CPTParameter As ObjectParameter = If(iD_CPT IsNot Nothing, New ObjectParameter("ID_CPT", iD_CPT), New ObjectParameter("ID_CPT", GetType(String)))

        Dim iD_PassageParameter As ObjectParameter = If(iD_Passage IsNot Nothing, New ObjectParameter("ID_Passage", iD_Passage), New ObjectParameter("ID_Passage", GetType(String)))

        Dim repereParameter As ObjectParameter = If(repere IsNot Nothing, New ObjectParameter("Repere", repere), New ObjectParameter("Repere", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("Ajout_Traca_Matiere_NS", iD_PFParameter, iD_CPTParameter, iD_PassageParameter, repereParameter, result)
    End Function

    Public Overridable Function Ajout_Traca_Matiere_NS_2(iD_PF As String, iD_CPT As String, iD_Passage As String, repere As String, code_SAP_Cpt As String, result As ObjectParameter) As Integer
        Dim iD_PFParameter As ObjectParameter = If(iD_PF IsNot Nothing, New ObjectParameter("ID_PF", iD_PF), New ObjectParameter("ID_PF", GetType(String)))

        Dim iD_CPTParameter As ObjectParameter = If(iD_CPT IsNot Nothing, New ObjectParameter("ID_CPT", iD_CPT), New ObjectParameter("ID_CPT", GetType(String)))

        Dim iD_PassageParameter As ObjectParameter = If(iD_Passage IsNot Nothing, New ObjectParameter("ID_Passage", iD_Passage), New ObjectParameter("ID_Passage", GetType(String)))

        Dim repereParameter As ObjectParameter = If(repere IsNot Nothing, New ObjectParameter("Repere", repere), New ObjectParameter("Repere", GetType(String)))

        Dim code_SAP_CptParameter As ObjectParameter = If(code_SAP_Cpt IsNot Nothing, New ObjectParameter("Code_SAP_Cpt", code_SAP_Cpt), New ObjectParameter("Code_SAP_Cpt", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("Ajout_Traca_Matiere_NS_2", iD_PFParameter, iD_CPTParameter, iD_PassageParameter, repereParameter, code_SAP_CptParameter, result)
    End Function

    Public Overridable Function Ajout_Traca_Matiere_NS_ENS(iD_PF As String, iD_CPT As String, iD_Passage As String, repere As String, code_SAP_Cpt As String, nS_SENS As String, result As ObjectParameter) As Integer
        Dim iD_PFParameter As ObjectParameter = If(iD_PF IsNot Nothing, New ObjectParameter("ID_PF", iD_PF), New ObjectParameter("ID_PF", GetType(String)))

        Dim iD_CPTParameter As ObjectParameter = If(iD_CPT IsNot Nothing, New ObjectParameter("ID_CPT", iD_CPT), New ObjectParameter("ID_CPT", GetType(String)))

        Dim iD_PassageParameter As ObjectParameter = If(iD_Passage IsNot Nothing, New ObjectParameter("ID_Passage", iD_Passage), New ObjectParameter("ID_Passage", GetType(String)))

        Dim repereParameter As ObjectParameter = If(repere IsNot Nothing, New ObjectParameter("Repere", repere), New ObjectParameter("Repere", GetType(String)))

        Dim code_SAP_CptParameter As ObjectParameter = If(code_SAP_Cpt IsNot Nothing, New ObjectParameter("Code_SAP_Cpt", code_SAP_Cpt), New ObjectParameter("Code_SAP_Cpt", GetType(String)))

        Dim nS_SENSParameter As ObjectParameter = If(nS_SENS IsNot Nothing, New ObjectParameter("NS_SENS", nS_SENS), New ObjectParameter("NS_SENS", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("Ajout_Traca_Matiere_NS_ENS", iD_PFParameter, iD_CPTParameter, iD_PassageParameter, repereParameter, code_SAP_CptParameter, nS_SENSParameter, result)
    End Function

    Public Overridable Function Ajout_Traca_Matiere_Passage(etape As String, iD_PF As String, result As ObjectParameter) As Integer
        Dim etapeParameter As ObjectParameter = If(etape IsNot Nothing, New ObjectParameter("Etape", etape), New ObjectParameter("Etape", GetType(String)))

        Dim iD_PFParameter As ObjectParameter = If(iD_PF IsNot Nothing, New ObjectParameter("ID_PF", iD_PF), New ObjectParameter("ID_PF", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("Ajout_Traca_Matiere_Passage", etapeParameter, iD_PFParameter, result)
    End Function

    Public Overridable Function Ajout_Traca_Outillage(id_Passage As String, n_Outillage As String, type_outillage As String, date_limite_Utilisation As Nullable(Of Date)) As Integer
        Dim id_PassageParameter As ObjectParameter = If(id_Passage IsNot Nothing, New ObjectParameter("Id_Passage", id_Passage), New ObjectParameter("Id_Passage", GetType(String)))

        Dim n_OutillageParameter As ObjectParameter = If(n_Outillage IsNot Nothing, New ObjectParameter("N_Outillage", n_Outillage), New ObjectParameter("N_Outillage", GetType(String)))

        Dim type_outillageParameter As ObjectParameter = If(type_outillage IsNot Nothing, New ObjectParameter("Type_outillage", type_outillage), New ObjectParameter("Type_outillage", GetType(String)))

        Dim date_limite_UtilisationParameter As ObjectParameter = If(date_limite_Utilisation.HasValue, New ObjectParameter("Date_limite_Utilisation", date_limite_Utilisation), New ObjectParameter("Date_limite_Utilisation", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("Ajout_Traca_Outillage", id_PassageParameter, n_OutillageParameter, type_outillageParameter, date_limite_UtilisationParameter)
    End Function

    Public Overridable Function Conteneur_Disponible(n_conteneur As String, result As ObjectParameter) As Integer
        Dim n_conteneurParameter As ObjectParameter = If(n_conteneur IsNot Nothing, New ObjectParameter("N_conteneur", n_conteneur), New ObjectParameter("N_conteneur", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("Conteneur_Disponible", n_conteneurParameter, result)
    End Function

    Public Overridable Function DEL_PSG(iD_PSG As Nullable(Of Long)) As Integer
        Dim iD_PSGParameter As ObjectParameter = If(iD_PSG.HasValue, New ObjectParameter("ID_PSG", iD_PSG), New ObjectParameter("ID_PSG", GetType(Long)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("DEL_PSG", iD_PSGParameter)
    End Function

    Public Overridable Function Diminuer_Qte_Conteneur(n_gestion As Nullable(Of Integer), localisation As String, qte As Nullable(Of Single), result As ObjectParameter) As Integer
        Dim n_gestionParameter As ObjectParameter = If(n_gestion.HasValue, New ObjectParameter("N_gestion", n_gestion), New ObjectParameter("N_gestion", GetType(Integer)))

        Dim localisationParameter As ObjectParameter = If(localisation IsNot Nothing, New ObjectParameter("Localisation", localisation), New ObjectParameter("Localisation", GetType(String)))

        Dim qteParameter As ObjectParameter = If(qte.HasValue, New ObjectParameter("Qte", qte), New ObjectParameter("Qte", GetType(Single)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("Diminuer_Qte_Conteneur", n_gestionParameter, localisationParameter, qteParameter, result)
    End Function

    Public Overridable Function Donnees_Conteneur(n_Conteneur As String, [oF] As Nullable(Of Integer)) As ObjectResult(Of Donnees_Conteneur_Result)
        Dim n_ConteneurParameter As ObjectParameter = If(n_Conteneur IsNot Nothing, New ObjectParameter("N_Conteneur", n_Conteneur), New ObjectParameter("N_Conteneur", GetType(String)))

        Dim oFParameter As ObjectParameter = If([oF].HasValue, New ObjectParameter("OF", [oF]), New ObjectParameter("OF", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Donnees_Conteneur_Result)("Donnees_Conteneur", n_ConteneurParameter, oFParameter)
    End Function

    Public Overridable Function Doublon_Passage_NS_Etape(nS As String, etape As String, nb_Passage As ObjectParameter) As ObjectResult(Of String)
        Dim nSParameter As ObjectParameter = If(nS IsNot Nothing, New ObjectParameter("NS", nS), New ObjectParameter("NS", GetType(String)))

        Dim etapeParameter As ObjectParameter = If(etape IsNot Nothing, New ObjectParameter("Etape", etape), New ObjectParameter("Etape", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of String)("Doublon_Passage_NS_Etape", nSParameter, etapeParameter, nb_Passage)
    End Function

    Public Overridable Function ENS_INFO(ref_Produit As String) As ObjectResult(Of ENS_INFO_Result)
        Dim ref_ProduitParameter As ObjectParameter = If(ref_Produit IsNot Nothing, New ObjectParameter("Ref_Produit", ref_Produit), New ObjectParameter("Ref_Produit", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of ENS_INFO_Result)("ENS_INFO", ref_ProduitParameter)
    End Function

    Public Overridable Function Etape_par_OF([oF] As Nullable(Of Integer)) As ObjectResult(Of String)
        Dim oFParameter As ObjectParameter = If([oF].HasValue, New ObjectParameter("OF", [oF]), New ObjectParameter("OF", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of String)("Etape_par_OF", oFParameter)
    End Function

    Public Overridable Function Extraction_Traca_Matiere_NS(nS As String) As ObjectResult(Of Extraction_Traca_Matiere_NS_Result)
        Dim nSParameter As ObjectParameter = If(nS IsNot Nothing, New ObjectParameter("NS", nS), New ObjectParameter("NS", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Extraction_Traca_Matiere_NS_Result)("Extraction_Traca_Matiere_NS", nSParameter)
    End Function

    Public Overridable Function Extraction_Traca_Matiere_OF([oF] As String) As ObjectResult(Of Extraction_Traca_Matiere_OF_Result)
        Dim oFParameter As ObjectParameter = If([oF] IsNot Nothing, New ObjectParameter("OF", [oF]), New ObjectParameter("OF", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Extraction_Traca_Matiere_OF_Result)("Extraction_Traca_Matiere_OF", oFParameter)
    End Function

    Public Overridable Function Extraction_Traca_Matiere_OF_OP([oF] As String, etape As String) As ObjectResult(Of Extraction_Traca_Matiere_OF_OP_Result)
        Dim oFParameter As ObjectParameter = If([oF] IsNot Nothing, New ObjectParameter("OF", [oF]), New ObjectParameter("OF", GetType(String)))

        Dim etapeParameter As ObjectParameter = If(etape IsNot Nothing, New ObjectParameter("Etape", etape), New ObjectParameter("Etape", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Extraction_Traca_Matiere_OF_OP_Result)("Extraction_Traca_Matiere_OF_OP", oFParameter, etapeParameter)
    End Function

    Public Overridable Function INS_TMP_PST_NMCL(poste As String, nM_LGN As Nullable(Of Integer), nM_OF As Nullable(Of Integer), nM_OP As Nullable(Of Integer), lB_RPR As String, nM_SAP_CPT As String, lB_CPT As String, nM_QTE_PDT As Nullable(Of Single), nM_CNTR As String, nM_QTE_CNTR As Nullable(Of Single), iD_GST_CNTR As Nullable(Of Integer), iD_CPT As String, result As ObjectParameter) As Integer
        Dim posteParameter As ObjectParameter = If(poste IsNot Nothing, New ObjectParameter("Poste", poste), New ObjectParameter("Poste", GetType(String)))

        Dim nM_LGNParameter As ObjectParameter = If(nM_LGN.HasValue, New ObjectParameter("NM_LGN", nM_LGN), New ObjectParameter("NM_LGN", GetType(Integer)))

        Dim nM_OFParameter As ObjectParameter = If(nM_OF.HasValue, New ObjectParameter("NM_OF", nM_OF), New ObjectParameter("NM_OF", GetType(Integer)))

        Dim nM_OPParameter As ObjectParameter = If(nM_OP.HasValue, New ObjectParameter("NM_OP", nM_OP), New ObjectParameter("NM_OP", GetType(Integer)))

        Dim lB_RPRParameter As ObjectParameter = If(lB_RPR IsNot Nothing, New ObjectParameter("LB_RPR", lB_RPR), New ObjectParameter("LB_RPR", GetType(String)))

        Dim nM_SAP_CPTParameter As ObjectParameter = If(nM_SAP_CPT IsNot Nothing, New ObjectParameter("NM_SAP_CPT", nM_SAP_CPT), New ObjectParameter("NM_SAP_CPT", GetType(String)))

        Dim lB_CPTParameter As ObjectParameter = If(lB_CPT IsNot Nothing, New ObjectParameter("LB_CPT", lB_CPT), New ObjectParameter("LB_CPT", GetType(String)))

        Dim nM_QTE_PDTParameter As ObjectParameter = If(nM_QTE_PDT.HasValue, New ObjectParameter("NM_QTE_PDT", nM_QTE_PDT), New ObjectParameter("NM_QTE_PDT", GetType(Single)))

        Dim nM_CNTRParameter As ObjectParameter = If(nM_CNTR IsNot Nothing, New ObjectParameter("NM_CNTR", nM_CNTR), New ObjectParameter("NM_CNTR", GetType(String)))

        Dim nM_QTE_CNTRParameter As ObjectParameter = If(nM_QTE_CNTR.HasValue, New ObjectParameter("NM_QTE_CNTR", nM_QTE_CNTR), New ObjectParameter("NM_QTE_CNTR", GetType(Single)))

        Dim iD_GST_CNTRParameter As ObjectParameter = If(iD_GST_CNTR.HasValue, New ObjectParameter("ID_GST_CNTR", iD_GST_CNTR), New ObjectParameter("ID_GST_CNTR", GetType(Integer)))

        Dim iD_CPTParameter As ObjectParameter = If(iD_CPT IsNot Nothing, New ObjectParameter("ID_CPT", iD_CPT), New ObjectParameter("ID_CPT", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("INS_TMP_PST_NMCL", posteParameter, nM_LGNParameter, nM_OFParameter, nM_OPParameter, lB_RPRParameter, nM_SAP_CPTParameter, lB_CPTParameter, nM_QTE_PDTParameter, nM_CNTRParameter, nM_QTE_CNTRParameter, iD_GST_CNTRParameter, iD_CPTParameter, result)
    End Function

    Public Overridable Function INS_TMP_PST_OUTI(poste As String, type_Outil As String, outil_Oblig As String, n_Outil As String, date_limit As Nullable(Of Date), iD_Outil As Nullable(Of Integer), result As ObjectParameter) As Integer
        Dim posteParameter As ObjectParameter = If(poste IsNot Nothing, New ObjectParameter("Poste", poste), New ObjectParameter("Poste", GetType(String)))

        Dim type_OutilParameter As ObjectParameter = If(type_Outil IsNot Nothing, New ObjectParameter("Type_Outil", type_Outil), New ObjectParameter("Type_Outil", GetType(String)))

        Dim outil_ObligParameter As ObjectParameter = If(outil_Oblig IsNot Nothing, New ObjectParameter("Outil_Oblig", outil_Oblig), New ObjectParameter("Outil_Oblig", GetType(String)))

        Dim n_OutilParameter As ObjectParameter = If(n_Outil IsNot Nothing, New ObjectParameter("N_Outil", n_Outil), New ObjectParameter("N_Outil", GetType(String)))

        Dim date_limitParameter As ObjectParameter = If(date_limit.HasValue, New ObjectParameter("Date_limit", date_limit), New ObjectParameter("Date_limit", GetType(Date)))

        Dim iD_OutilParameter As ObjectParameter = If(iD_Outil.HasValue, New ObjectParameter("ID_Outil", iD_Outil), New ObjectParameter("ID_Outil", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("INS_TMP_PST_OUTI", posteParameter, type_OutilParameter, outil_ObligParameter, n_OutilParameter, date_limitParameter, iD_OutilParameter, result)
    End Function

    Public Overridable Function INS_TR_PSG(etape As String, iD_PF As String, lB_MOYN As String, matricule As Nullable(Of Short), result As ObjectParameter) As Integer
        Dim etapeParameter As ObjectParameter = If(etape IsNot Nothing, New ObjectParameter("Etape", etape), New ObjectParameter("Etape", GetType(String)))

        Dim iD_PFParameter As ObjectParameter = If(iD_PF IsNot Nothing, New ObjectParameter("ID_PF", iD_PF), New ObjectParameter("ID_PF", GetType(String)))

        Dim lB_MOYNParameter As ObjectParameter = If(lB_MOYN IsNot Nothing, New ObjectParameter("LB_MOYN", lB_MOYN), New ObjectParameter("LB_MOYN", GetType(String)))

        Dim matriculeParameter As ObjectParameter = If(matricule.HasValue, New ObjectParameter("matricule", matricule), New ObjectParameter("matricule", GetType(Short)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("INS_TR_PSG", etapeParameter, iD_PFParameter, lB_MOYNParameter, matriculeParameter, result)
    End Function

    Public Overridable Function INS_TR_PSG_OF(etape As String, iD_PF As String, lB_MOYN As String, matricule As Nullable(Of Short), nM_OF As Nullable(Of Integer), result As ObjectParameter) As Integer
        Dim etapeParameter As ObjectParameter = If(etape IsNot Nothing, New ObjectParameter("Etape", etape), New ObjectParameter("Etape", GetType(String)))

        Dim iD_PFParameter As ObjectParameter = If(iD_PF IsNot Nothing, New ObjectParameter("ID_PF", iD_PF), New ObjectParameter("ID_PF", GetType(String)))

        Dim lB_MOYNParameter As ObjectParameter = If(lB_MOYN IsNot Nothing, New ObjectParameter("LB_MOYN", lB_MOYN), New ObjectParameter("LB_MOYN", GetType(String)))

        Dim matriculeParameter As ObjectParameter = If(matricule.HasValue, New ObjectParameter("matricule", matricule), New ObjectParameter("matricule", GetType(Short)))

        Dim nM_OFParameter As ObjectParameter = If(nM_OF.HasValue, New ObjectParameter("NM_OF", nM_OF), New ObjectParameter("NM_OF", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("INS_TR_PSG_OF", etapeParameter, iD_PFParameter, lB_MOYNParameter, matriculeParameter, nM_OFParameter, result)
    End Function

    Public Overridable Function Liste_Conteneurs_Servis_OF([oF] As Nullable(Of Integer), preparateur As String) As ObjectResult(Of Liste_Conteneurs_Servis_OF_Result)
        Dim oFParameter As ObjectParameter = If([oF].HasValue, New ObjectParameter("OF", [oF]), New ObjectParameter("OF", GetType(Integer)))

        Dim preparateurParameter As ObjectParameter = If(preparateur IsNot Nothing, New ObjectParameter("Preparateur", preparateur), New ObjectParameter("Preparateur", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Liste_Conteneurs_Servis_OF_Result)("Liste_Conteneurs_Servis_OF", oFParameter, preparateurParameter)
    End Function

    Public Overridable Function Liste_Outillage_Attendu(article As String, oP As Nullable(Of Short)) As ObjectResult(Of Liste_Outillage_Attendu_Result)
        Dim articleParameter As ObjectParameter = If(article IsNot Nothing, New ObjectParameter("Article", article), New ObjectParameter("Article", GetType(String)))

        Dim oPParameter As ObjectParameter = If(oP.HasValue, New ObjectParameter("OP", oP), New ObjectParameter("OP", GetType(Short)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Liste_Outillage_Attendu_Result)("Liste_Outillage_Attendu", articleParameter, oPParameter)
    End Function

    Public Overridable Function Liste_Passage_OF_Etape([oF] As String, etape As String) As ObjectResult(Of String)
        Dim oFParameter As ObjectParameter = If([oF] IsNot Nothing, New ObjectParameter("OF", [oF]), New ObjectParameter("OF", GetType(String)))

        Dim etapeParameter As ObjectParameter = If(etape IsNot Nothing, New ObjectParameter("Etape", etape), New ObjectParameter("Etape", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of String)("Liste_Passage_OF_Etape", oFParameter, etapeParameter)
    End Function

    Public Overridable Function LST_PST_ETP_MOY(lB_PST As String) As ObjectResult(Of LST_PST_ETP_MOY_Result)
        Dim lB_PSTParameter As ObjectParameter = If(lB_PST IsNot Nothing, New ObjectParameter("LB_PST", lB_PST), New ObjectParameter("LB_PST", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of LST_PST_ETP_MOY_Result)("LST_PST_ETP_MOY", lB_PSTParameter)
    End Function

    Public Overridable Function LST_SENS_Pour_ENS(produit As String) As ObjectResult(Of LST_SENS_Pour_ENS_Result)
        Dim produitParameter As ObjectParameter = If(produit IsNot Nothing, New ObjectParameter("produit", produit), New ObjectParameter("produit", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of LST_SENS_Pour_ENS_Result)("LST_SENS_Pour_ENS", produitParameter)
    End Function

    Public Overridable Function LST_TAMP_OUTI(poste As String) As ObjectResult(Of LST_TAMP_OUTI_Result)
        Dim posteParameter As ObjectParameter = If(poste IsNot Nothing, New ObjectParameter("Poste", poste), New ObjectParameter("Poste", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of LST_TAMP_OUTI_Result)("LST_TAMP_OUTI", posteParameter)
    End Function

    Public Overridable Function LST_TMP_NMCL(lB_PST As String) As ObjectResult(Of LST_TMP_NMCL_Result)
        Dim lB_PSTParameter As ObjectParameter = If(lB_PST IsNot Nothing, New ObjectParameter("LB_PST", lB_PST), New ObjectParameter("LB_PST", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of LST_TMP_NMCL_Result)("LST_TMP_NMCL", lB_PSTParameter)
    End Function

    Public Overridable Function MAJ_Conteneur_Disponible(n_conteneur As String, disponible As String) As Integer
        Dim n_conteneurParameter As ObjectParameter = If(n_conteneur IsNot Nothing, New ObjectParameter("N_conteneur", n_conteneur), New ObjectParameter("N_conteneur", GetType(String)))

        Dim disponibleParameter As ObjectParameter = If(disponible IsNot Nothing, New ObjectParameter("Disponible", disponible), New ObjectParameter("Disponible", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("MAJ_Conteneur_Disponible", n_conteneurParameter, disponibleParameter)
    End Function

    Public Overridable Function MAJ_EUROPLACER(rESULTAT As ObjectParameter) As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("MAJ_EUROPLACER", rESULTAT)
    End Function

    Public Overridable Function MAJ_EUROPLACER_Fichier(fICHIER_EUROPLACER As String, rESULTAT As ObjectParameter) As Integer
        Dim fICHIER_EUROPLACERParameter As ObjectParameter = If(fICHIER_EUROPLACER IsNot Nothing, New ObjectParameter("FICHIER_EUROPLACER", fICHIER_EUROPLACER), New ObjectParameter("FICHIER_EUROPLACER", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("MAJ_EUROPLACER_Fichier", fICHIER_EUROPLACERParameter, rESULTAT)
    End Function

    Public Overridable Function MAJ_Qte_Conteneur(n_gestion As Nullable(Of Integer), localisation As String, qte As Nullable(Of Single), result As ObjectParameter) As Integer
        Dim n_gestionParameter As ObjectParameter = If(n_gestion.HasValue, New ObjectParameter("N_gestion", n_gestion), New ObjectParameter("N_gestion", GetType(Integer)))

        Dim localisationParameter As ObjectParameter = If(localisation IsNot Nothing, New ObjectParameter("Localisation", localisation), New ObjectParameter("Localisation", GetType(String)))

        Dim qteParameter As ObjectParameter = If(qte.HasValue, New ObjectParameter("Qte", qte), New ObjectParameter("Qte", GetType(Single)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("MAJ_Qte_Conteneur", n_gestionParameter, localisationParameter, qteParameter, result)
    End Function

    Public Overridable Function MAJ_TMP_PST_FLAN(poste As String, nB_CTRL_FLAN As Nullable(Of Integer)) As Integer
        Dim posteParameter As ObjectParameter = If(poste IsNot Nothing, New ObjectParameter("Poste", poste), New ObjectParameter("Poste", GetType(String)))

        Dim nB_CTRL_FLANParameter As ObjectParameter = If(nB_CTRL_FLAN.HasValue, New ObjectParameter("NB_CTRL_FLAN", nB_CTRL_FLAN), New ObjectParameter("NB_CTRL_FLAN", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("MAJ_TMP_PST_FLAN", posteParameter, nB_CTRL_FLANParameter)
    End Function

    Public Overridable Function New_N_ENS_SERAP(produit As String, result As ObjectParameter) As Integer
        Dim produitParameter As ObjectParameter = If(produit IsNot Nothing, New ObjectParameter("Produit", produit), New ObjectParameter("Produit", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("New_N_ENS_SERAP", produitParameter, result)
    End Function

    Public Overridable Function P_ADD_PSG_DTM_PSG(lB_ETP As String, dT_DEB As Nullable(Of Date), dT_FIN As Nullable(Of Date), lB_MOYN As String, lB_PROG As String, nM_MATR As Nullable(Of Integer), lB_DOC As String, nM_NS_EOL As String, lB_SCTN As String, nM_OF As Nullable(Of Integer), result As ObjectParameter) As Integer
        Dim lB_ETPParameter As ObjectParameter = If(lB_ETP IsNot Nothing, New ObjectParameter("LB_ETP", lB_ETP), New ObjectParameter("LB_ETP", GetType(String)))

        Dim dT_DEBParameter As ObjectParameter = If(dT_DEB.HasValue, New ObjectParameter("DT_DEB", dT_DEB), New ObjectParameter("DT_DEB", GetType(Date)))

        Dim dT_FINParameter As ObjectParameter = If(dT_FIN.HasValue, New ObjectParameter("DT_FIN", dT_FIN), New ObjectParameter("DT_FIN", GetType(Date)))

        Dim lB_MOYNParameter As ObjectParameter = If(lB_MOYN IsNot Nothing, New ObjectParameter("LB_MOYN", lB_MOYN), New ObjectParameter("LB_MOYN", GetType(String)))

        Dim lB_PROGParameter As ObjectParameter = If(lB_PROG IsNot Nothing, New ObjectParameter("LB_PROG", lB_PROG), New ObjectParameter("LB_PROG", GetType(String)))

        Dim nM_MATRParameter As ObjectParameter = If(nM_MATR.HasValue, New ObjectParameter("NM_MATR", nM_MATR), New ObjectParameter("NM_MATR", GetType(Integer)))

        Dim lB_DOCParameter As ObjectParameter = If(lB_DOC IsNot Nothing, New ObjectParameter("LB_DOC", lB_DOC), New ObjectParameter("LB_DOC", GetType(String)))

        Dim nM_NS_EOLParameter As ObjectParameter = If(nM_NS_EOL IsNot Nothing, New ObjectParameter("NM_NS_EOL", nM_NS_EOL), New ObjectParameter("NM_NS_EOL", GetType(String)))

        Dim lB_SCTNParameter As ObjectParameter = If(lB_SCTN IsNot Nothing, New ObjectParameter("LB_SCTN", lB_SCTN), New ObjectParameter("LB_SCTN", GetType(String)))

        Dim nM_OFParameter As ObjectParameter = If(nM_OF.HasValue, New ObjectParameter("NM_OF", nM_OF), New ObjectParameter("NM_OF", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("P_ADD_PSG_DTM_PSG", lB_ETPParameter, dT_DEBParameter, dT_FINParameter, lB_MOYNParameter, lB_PROGParameter, nM_MATRParameter, lB_DOCParameter, nM_NS_EOLParameter, lB_SCTNParameter, nM_OFParameter, result)
    End Function

    Public Overridable Function P_ADD_PSG_DTM_PSG_V2(lB_ETP As String, dT_DEB As Nullable(Of Date), dT_FIN As Nullable(Of Date), lB_MOYN As String, lB_PROG As String, nM_MATR As Nullable(Of Integer), lB_DOC As String, nM_NS_EOL As String, nM_NS_CLIE As String, lB_SCTN As String, nM_OF As Nullable(Of Integer), result As ObjectParameter) As Integer
        Dim lB_ETPParameter As ObjectParameter = If(lB_ETP IsNot Nothing, New ObjectParameter("LB_ETP", lB_ETP), New ObjectParameter("LB_ETP", GetType(String)))

        Dim dT_DEBParameter As ObjectParameter = If(dT_DEB.HasValue, New ObjectParameter("DT_DEB", dT_DEB), New ObjectParameter("DT_DEB", GetType(Date)))

        Dim dT_FINParameter As ObjectParameter = If(dT_FIN.HasValue, New ObjectParameter("DT_FIN", dT_FIN), New ObjectParameter("DT_FIN", GetType(Date)))

        Dim lB_MOYNParameter As ObjectParameter = If(lB_MOYN IsNot Nothing, New ObjectParameter("LB_MOYN", lB_MOYN), New ObjectParameter("LB_MOYN", GetType(String)))

        Dim lB_PROGParameter As ObjectParameter = If(lB_PROG IsNot Nothing, New ObjectParameter("LB_PROG", lB_PROG), New ObjectParameter("LB_PROG", GetType(String)))

        Dim nM_MATRParameter As ObjectParameter = If(nM_MATR.HasValue, New ObjectParameter("NM_MATR", nM_MATR), New ObjectParameter("NM_MATR", GetType(Integer)))

        Dim lB_DOCParameter As ObjectParameter = If(lB_DOC IsNot Nothing, New ObjectParameter("LB_DOC", lB_DOC), New ObjectParameter("LB_DOC", GetType(String)))

        Dim nM_NS_EOLParameter As ObjectParameter = If(nM_NS_EOL IsNot Nothing, New ObjectParameter("NM_NS_EOL", nM_NS_EOL), New ObjectParameter("NM_NS_EOL", GetType(String)))

        Dim nM_NS_CLIEParameter As ObjectParameter = If(nM_NS_CLIE IsNot Nothing, New ObjectParameter("NM_NS_CLIE", nM_NS_CLIE), New ObjectParameter("NM_NS_CLIE", GetType(String)))

        Dim lB_SCTNParameter As ObjectParameter = If(lB_SCTN IsNot Nothing, New ObjectParameter("LB_SCTN", lB_SCTN), New ObjectParameter("LB_SCTN", GetType(String)))

        Dim nM_OFParameter As ObjectParameter = If(nM_OF.HasValue, New ObjectParameter("NM_OF", nM_OF), New ObjectParameter("NM_OF", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("P_ADD_PSG_DTM_PSG_V2", lB_ETPParameter, dT_DEBParameter, dT_FINParameter, lB_MOYNParameter, lB_PROGParameter, nM_MATRParameter, lB_DOCParameter, nM_NS_EOLParameter, nM_NS_CLIEParameter, lB_SCTNParameter, nM_OFParameter, result)
    End Function

    Public Overridable Function P_ADD_TCBL_COMP(iD_PF As String, iD_CPT As String, iD_Passage As Nullable(Of Integer), repere As String, nM_CNTR As String, result As ObjectParameter) As Integer
        Dim iD_PFParameter As ObjectParameter = If(iD_PF IsNot Nothing, New ObjectParameter("ID_PF", iD_PF), New ObjectParameter("ID_PF", GetType(String)))

        Dim iD_CPTParameter As ObjectParameter = If(iD_CPT IsNot Nothing, New ObjectParameter("ID_CPT", iD_CPT), New ObjectParameter("ID_CPT", GetType(String)))

        Dim iD_PassageParameter As ObjectParameter = If(iD_Passage.HasValue, New ObjectParameter("ID_Passage", iD_Passage), New ObjectParameter("ID_Passage", GetType(Integer)))

        Dim repereParameter As ObjectParameter = If(repere IsNot Nothing, New ObjectParameter("Repere", repere), New ObjectParameter("Repere", GetType(String)))

        Dim nM_CNTRParameter As ObjectParameter = If(nM_CNTR IsNot Nothing, New ObjectParameter("NM_CNTR", nM_CNTR), New ObjectParameter("NM_CNTR", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("P_ADD_TCBL_COMP", iD_PFParameter, iD_CPTParameter, iD_PassageParameter, repereParameter, nM_CNTRParameter, result)
    End Function

    Public Overridable Function P_ADD_TCBL_MAT_NS_ENS_V2(iD_PF As String, repere As String, code_SAP_Cpt As String, nS_SENS As String, etape As String, [oF] As String, iD_Passage As ObjectParameter, result As ObjectParameter) As Integer
        Dim iD_PFParameter As ObjectParameter = If(iD_PF IsNot Nothing, New ObjectParameter("ID_PF", iD_PF), New ObjectParameter("ID_PF", GetType(String)))

        Dim repereParameter As ObjectParameter = If(repere IsNot Nothing, New ObjectParameter("Repere", repere), New ObjectParameter("Repere", GetType(String)))

        Dim code_SAP_CptParameter As ObjectParameter = If(code_SAP_Cpt IsNot Nothing, New ObjectParameter("Code_SAP_Cpt", code_SAP_Cpt), New ObjectParameter("Code_SAP_Cpt", GetType(String)))

        Dim nS_SENSParameter As ObjectParameter = If(nS_SENS IsNot Nothing, New ObjectParameter("NS_SENS", nS_SENS), New ObjectParameter("NS_SENS", GetType(String)))

        Dim etapeParameter As ObjectParameter = If(etape IsNot Nothing, New ObjectParameter("Etape", etape), New ObjectParameter("Etape", GetType(String)))

        Dim oFParameter As ObjectParameter = If([oF] IsNot Nothing, New ObjectParameter("OF", [oF]), New ObjectParameter("OF", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("P_ADD_TCBL_MAT_NS_ENS_V2", iD_PFParameter, repereParameter, code_SAP_CptParameter, nS_SENSParameter, etapeParameter, oFParameter, iD_Passage, result)
    End Function

    Public Overridable Function P_ADD_TCBL_MAT_NS_ENS_V3(iD_PF As String, repere As String, code_SAP_Cpt As String, nS_SENS As String, etape As String, lB_MOYN As String, lB_PROG As String, nM_MATR As Nullable(Of Integer), [oF] As String, iD_Passage As ObjectParameter, result As ObjectParameter) As Integer
        Dim iD_PFParameter As ObjectParameter = If(iD_PF IsNot Nothing, New ObjectParameter("ID_PF", iD_PF), New ObjectParameter("ID_PF", GetType(String)))

        Dim repereParameter As ObjectParameter = If(repere IsNot Nothing, New ObjectParameter("Repere", repere), New ObjectParameter("Repere", GetType(String)))

        Dim code_SAP_CptParameter As ObjectParameter = If(code_SAP_Cpt IsNot Nothing, New ObjectParameter("Code_SAP_Cpt", code_SAP_Cpt), New ObjectParameter("Code_SAP_Cpt", GetType(String)))

        Dim nS_SENSParameter As ObjectParameter = If(nS_SENS IsNot Nothing, New ObjectParameter("NS_SENS", nS_SENS), New ObjectParameter("NS_SENS", GetType(String)))

        Dim etapeParameter As ObjectParameter = If(etape IsNot Nothing, New ObjectParameter("Etape", etape), New ObjectParameter("Etape", GetType(String)))

        Dim lB_MOYNParameter As ObjectParameter = If(lB_MOYN IsNot Nothing, New ObjectParameter("LB_MOYN", lB_MOYN), New ObjectParameter("LB_MOYN", GetType(String)))

        Dim lB_PROGParameter As ObjectParameter = If(lB_PROG IsNot Nothing, New ObjectParameter("LB_PROG", lB_PROG), New ObjectParameter("LB_PROG", GetType(String)))

        Dim nM_MATRParameter As ObjectParameter = If(nM_MATR.HasValue, New ObjectParameter("NM_MATR", nM_MATR), New ObjectParameter("NM_MATR", GetType(Integer)))

        Dim oFParameter As ObjectParameter = If([oF] IsNot Nothing, New ObjectParameter("OF", [oF]), New ObjectParameter("OF", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("P_ADD_TCBL_MAT_NS_ENS_V3", iD_PFParameter, repereParameter, code_SAP_CptParameter, nS_SENSParameter, etapeParameter, lB_MOYNParameter, lB_PROGParameter, nM_MATRParameter, oFParameter, iD_Passage, result)
    End Function

    Public Overridable Function P_ADD_TCBL_MAT_NS_ENS_V4(iD_PF As String, repere As String, code_SAP_Cpt As String, nS_SENS As String, etape As String, lB_MOYN As String, lB_PROG As String, nM_MATR As Nullable(Of Integer), [oF] As String, iD_CPT As String, iD_Passage As ObjectParameter, result As ObjectParameter) As Integer
        Dim iD_PFParameter As ObjectParameter = If(iD_PF IsNot Nothing, New ObjectParameter("ID_PF", iD_PF), New ObjectParameter("ID_PF", GetType(String)))

        Dim repereParameter As ObjectParameter = If(repere IsNot Nothing, New ObjectParameter("Repere", repere), New ObjectParameter("Repere", GetType(String)))

        Dim code_SAP_CptParameter As ObjectParameter = If(code_SAP_Cpt IsNot Nothing, New ObjectParameter("Code_SAP_Cpt", code_SAP_Cpt), New ObjectParameter("Code_SAP_Cpt", GetType(String)))

        Dim nS_SENSParameter As ObjectParameter = If(nS_SENS IsNot Nothing, New ObjectParameter("NS_SENS", nS_SENS), New ObjectParameter("NS_SENS", GetType(String)))

        Dim etapeParameter As ObjectParameter = If(etape IsNot Nothing, New ObjectParameter("Etape", etape), New ObjectParameter("Etape", GetType(String)))

        Dim lB_MOYNParameter As ObjectParameter = If(lB_MOYN IsNot Nothing, New ObjectParameter("LB_MOYN", lB_MOYN), New ObjectParameter("LB_MOYN", GetType(String)))

        Dim lB_PROGParameter As ObjectParameter = If(lB_PROG IsNot Nothing, New ObjectParameter("LB_PROG", lB_PROG), New ObjectParameter("LB_PROG", GetType(String)))

        Dim nM_MATRParameter As ObjectParameter = If(nM_MATR.HasValue, New ObjectParameter("NM_MATR", nM_MATR), New ObjectParameter("NM_MATR", GetType(Integer)))

        Dim oFParameter As ObjectParameter = If([oF] IsNot Nothing, New ObjectParameter("OF", [oF]), New ObjectParameter("OF", GetType(String)))

        Dim iD_CPTParameter As ObjectParameter = If(iD_CPT IsNot Nothing, New ObjectParameter("ID_CPT", iD_CPT), New ObjectParameter("ID_CPT", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("P_ADD_TCBL_MAT_NS_ENS_V4", iD_PFParameter, repereParameter, code_SAP_CptParameter, nS_SENSParameter, etapeParameter, lB_MOYNParameter, lB_PROGParameter, nM_MATRParameter, oFParameter, iD_CPTParameter, iD_Passage, result)
    End Function

    Public Overridable Function P_AVAE_GET_TCBL_NU_SER_ENSE(nU_SER_ENSE_UDI As String, nU_SER_MCU As ObjectParameter, nU_SER_ANLS As ObjectParameter, nU_SER_QR_CODE As ObjectParameter, rES As ObjectParameter) As Integer
        Dim nU_SER_ENSE_UDIParameter As ObjectParameter = If(nU_SER_ENSE_UDI IsNot Nothing, New ObjectParameter("NU_SER_ENSE_UDI", nU_SER_ENSE_UDI), New ObjectParameter("NU_SER_ENSE_UDI", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("P_AVAE_GET_TCBL_NU_SER_ENSE", nU_SER_ENSE_UDIParameter, nU_SER_MCU, nU_SER_ANLS, nU_SER_QR_CODE, rES)
    End Function

    Public Overridable Function P_CLSG_NEW_NU_CART(nU_OF As String, nU_CART As ObjectParameter, rET As ObjectParameter) As Integer
        Dim nU_OFParameter As ObjectParameter = If(nU_OF IsNot Nothing, New ObjectParameter("NU_OF", nU_OF), New ObjectParameter("NU_OF", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("P_CLSG_NEW_NU_CART", nU_OFParameter, nU_CART, rET)
    End Function

    Public Overridable Function P_ENVO_MAIL_ECO(nM_DEST As String, nM_DEST_COPI As String, nM_DEST_COPY_CACH As String, nM_EXPE As String, nM_DSGT_EXPE As String, nM_DEST_REPO As String, tX_CONT As String, tX_SUJE As String, nM_FICH_ATTA As String) As Integer
        Dim nM_DESTParameter As ObjectParameter = If(nM_DEST IsNot Nothing, New ObjectParameter("NM_DEST", nM_DEST), New ObjectParameter("NM_DEST", GetType(String)))

        Dim nM_DEST_COPIParameter As ObjectParameter = If(nM_DEST_COPI IsNot Nothing, New ObjectParameter("NM_DEST_COPI", nM_DEST_COPI), New ObjectParameter("NM_DEST_COPI", GetType(String)))

        Dim nM_DEST_COPY_CACHParameter As ObjectParameter = If(nM_DEST_COPY_CACH IsNot Nothing, New ObjectParameter("NM_DEST_COPY_CACH", nM_DEST_COPY_CACH), New ObjectParameter("NM_DEST_COPY_CACH", GetType(String)))

        Dim nM_EXPEParameter As ObjectParameter = If(nM_EXPE IsNot Nothing, New ObjectParameter("NM_EXPE", nM_EXPE), New ObjectParameter("NM_EXPE", GetType(String)))

        Dim nM_DSGT_EXPEParameter As ObjectParameter = If(nM_DSGT_EXPE IsNot Nothing, New ObjectParameter("NM_DSGT_EXPE", nM_DSGT_EXPE), New ObjectParameter("NM_DSGT_EXPE", GetType(String)))

        Dim nM_DEST_REPOParameter As ObjectParameter = If(nM_DEST_REPO IsNot Nothing, New ObjectParameter("NM_DEST_REPO", nM_DEST_REPO), New ObjectParameter("NM_DEST_REPO", GetType(String)))

        Dim tX_CONTParameter As ObjectParameter = If(tX_CONT IsNot Nothing, New ObjectParameter("TX_CONT", tX_CONT), New ObjectParameter("TX_CONT", GetType(String)))

        Dim tX_SUJEParameter As ObjectParameter = If(tX_SUJE IsNot Nothing, New ObjectParameter("TX_SUJE", tX_SUJE), New ObjectParameter("TX_SUJE", GetType(String)))

        Dim nM_FICH_ATTAParameter As ObjectParameter = If(nM_FICH_ATTA IsNot Nothing, New ObjectParameter("NM_FICH_ATTA", nM_FICH_ATTA), New ObjectParameter("NM_FICH_ATTA", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("P_ENVO_MAIL_ECO", nM_DESTParameter, nM_DEST_COPIParameter, nM_DEST_COPY_CACHParameter, nM_EXPEParameter, nM_DSGT_EXPEParameter, nM_DEST_REPOParameter, tX_CONTParameter, tX_SUJEParameter, nM_FICH_ATTAParameter)
    End Function

    Public Overridable Function P_GET_DERN_NU_SER(nM_CRIT As String, nM_TYPE As String, nU_SER_DERN As ObjectParameter, rET As ObjectParameter) As Integer
        Dim nM_CRITParameter As ObjectParameter = If(nM_CRIT IsNot Nothing, New ObjectParameter("NM_CRIT", nM_CRIT), New ObjectParameter("NM_CRIT", GetType(String)))

        Dim nM_TYPEParameter As ObjectParameter = If(nM_TYPE IsNot Nothing, New ObjectParameter("NM_TYPE", nM_TYPE), New ObjectParameter("NM_TYPE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("P_GET_DERN_NU_SER", nM_CRITParameter, nM_TYPEParameter, nU_SER_DERN, rET)
    End Function

    Public Overridable Function P_GET_OPTI(nM_CRIT As String, mN_PARA As String, vAL_PARA As ObjectParameter, rET As ObjectParameter) As Integer
        Dim nM_CRITParameter As ObjectParameter = If(nM_CRIT IsNot Nothing, New ObjectParameter("NM_CRIT", nM_CRIT), New ObjectParameter("NM_CRIT", GetType(String)))

        Dim mN_PARAParameter As ObjectParameter = If(mN_PARA IsNot Nothing, New ObjectParameter("MN_PARA", mN_PARA), New ObjectParameter("MN_PARA", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("P_GET_OPTI", nM_CRITParameter, mN_PARAParameter, vAL_PARA, rET)
    End Function

    Public Overridable Function P_GET_TRAC_NU_SER_ENS_NU_SER_SS_ENS([oF] As String, eTAP As String, rET As ObjectParameter) As Integer
        Dim oFParameter As ObjectParameter = If([oF] IsNot Nothing, New ObjectParameter("OF", [oF]), New ObjectParameter("OF", GetType(String)))

        Dim eTAPParameter As ObjectParameter = If(eTAP IsNot Nothing, New ObjectParameter("ETAP", eTAP), New ObjectParameter("ETAP", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("P_GET_TRAC_NU_SER_ENS_NU_SER_SS_ENS", oFParameter, eTAPParameter, rET)
    End Function

    Public Overridable Function P_MAJ_RAPP_TEST(fichier_Rapport As String) As ObjectResult(Of P_MAJ_RAPP_TEST_Result)
        Dim fichier_RapportParameter As ObjectParameter = If(fichier_Rapport IsNot Nothing, New ObjectParameter("Fichier_Rapport", fichier_Rapport), New ObjectParameter("Fichier_Rapport", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of P_MAJ_RAPP_TEST_Result)("P_MAJ_RAPP_TEST", fichier_RapportParameter)
    End Function

    Public Overridable Function P_MAJ_TAKA(fichier_Rapport As String) As Integer
        Dim fichier_RapportParameter As ObjectParameter = If(fichier_Rapport IsNot Nothing, New ObjectParameter("Fichier_Rapport", fichier_Rapport), New ObjectParameter("Fichier_Rapport", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("P_MAJ_TAKA", fichier_RapportParameter)
    End Function

    Public Overridable Function P_MAJ_VALE_TEST(fichier_valeurs As String) As Integer
        Dim fichier_valeursParameter As ObjectParameter = If(fichier_valeurs IsNot Nothing, New ObjectParameter("Fichier_valeurs", fichier_valeurs), New ObjectParameter("Fichier_valeurs", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("P_MAJ_VALE_TEST", fichier_valeursParameter)
    End Function

    Public Overridable Function PRC_DNN_CNTR(nM_CNTR As String) As ObjectResult(Of PRC_DNN_CNTR_Result)
        Dim nM_CNTRParameter As ObjectParameter = If(nM_CNTR IsNot Nothing, New ObjectParameter("NM_CNTR", nM_CNTR), New ObjectParameter("NM_CNTR", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of PRC_DNN_CNTR_Result)("PRC_DNN_CNTR", nM_CNTRParameter)
    End Function

    Public Overridable Function PRC_EXTR_APPR_SERAP(nM_NS_EOL As String) As ObjectResult(Of PRC_EXTR_APPR_SERAP_Result)
        Dim nM_NS_EOLParameter As ObjectParameter = If(nM_NS_EOL IsNot Nothing, New ObjectParameter("NM_NS_EOL", nM_NS_EOL), New ObjectParameter("NM_NS_EOL", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of PRC_EXTR_APPR_SERAP_Result)("PRC_EXTR_APPR_SERAP", nM_NS_EOLParameter)
    End Function

    Public Overridable Function PRC_EXTR_CSV_NEOMEDLIGHT() As ObjectResult(Of String)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of String)("PRC_EXTR_CSV_NEOMEDLIGHT")
    End Function

    Public Overridable Function PRC_EXTR_RPPR_CSV_NEOMEDLIGHT(dIR_CSV_RAPPORT As String, rESULTAT As ObjectParameter) As Integer
        Dim dIR_CSV_RAPPORTParameter As ObjectParameter = If(dIR_CSV_RAPPORT IsNot Nothing, New ObjectParameter("DIR_CSV_RAPPORT", dIR_CSV_RAPPORT), New ObjectParameter("DIR_CSV_RAPPORT", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("PRC_EXTR_RPPR_CSV_NEOMEDLIGHT", dIR_CSV_RAPPORTParameter, rESULTAT)
    End Function

    Public Overridable Function PRC_EXTR_SNCT_RPRT(iD_RPRT As Nullable(Of Long), nM_NS As ObjectParameter, lB_SNCT As ObjectParameter) As Integer
        Dim iD_RPRTParameter As ObjectParameter = If(iD_RPRT.HasValue, New ObjectParameter("ID_RPRT", iD_RPRT), New ObjectParameter("ID_RPRT", GetType(Long)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("PRC_EXTR_SNCT_RPRT", iD_RPRTParameter, nM_NS, lB_SNCT)
    End Function

    Public Overridable Function PRC_EXTR_VAL_CSV_NEOMEDLIGHT(dIR_CSV_VALEUR As String, rESULTAT As ObjectParameter) As Integer
        Dim dIR_CSV_VALEURParameter As ObjectParameter = If(dIR_CSV_VALEUR IsNot Nothing, New ObjectParameter("DIR_CSV_VALEUR", dIR_CSV_VALEUR), New ObjectParameter("DIR_CSV_VALEUR", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("PRC_EXTR_VAL_CSV_NEOMEDLIGHT", dIR_CSV_VALEURParameter, rESULTAT)
    End Function

    Public Overridable Function PRC_GSTN_ERR([eRROR] As ObjectParameter) As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("PRC_GSTN_ERR", [eRROR])
    End Function

    Public Overridable Function PRC_INS_TST_RPRT(lB_BNC As String, cD_OPRT As String, cD_PRDT As String, nM_OF As String, nM_NS As String, lB_SNCT As String, lB_MD As String, vRS_LOG As String, vRS_SEQ As String, [eRROR] As ObjectParameter, iD_RPRT As ObjectParameter) As Integer
        Dim lB_BNCParameter As ObjectParameter = If(lB_BNC IsNot Nothing, New ObjectParameter("LB_BNC", lB_BNC), New ObjectParameter("LB_BNC", GetType(String)))

        Dim cD_OPRTParameter As ObjectParameter = If(cD_OPRT IsNot Nothing, New ObjectParameter("CD_OPRT", cD_OPRT), New ObjectParameter("CD_OPRT", GetType(String)))

        Dim cD_PRDTParameter As ObjectParameter = If(cD_PRDT IsNot Nothing, New ObjectParameter("CD_PRDT", cD_PRDT), New ObjectParameter("CD_PRDT", GetType(String)))

        Dim nM_OFParameter As ObjectParameter = If(nM_OF IsNot Nothing, New ObjectParameter("NM_OF", nM_OF), New ObjectParameter("NM_OF", GetType(String)))

        Dim nM_NSParameter As ObjectParameter = If(nM_NS IsNot Nothing, New ObjectParameter("NM_NS", nM_NS), New ObjectParameter("NM_NS", GetType(String)))

        Dim lB_SNCTParameter As ObjectParameter = If(lB_SNCT IsNot Nothing, New ObjectParameter("LB_SNCT", lB_SNCT), New ObjectParameter("LB_SNCT", GetType(String)))

        Dim lB_MDParameter As ObjectParameter = If(lB_MD IsNot Nothing, New ObjectParameter("LB_MD", lB_MD), New ObjectParameter("LB_MD", GetType(String)))

        Dim vRS_LOGParameter As ObjectParameter = If(vRS_LOG IsNot Nothing, New ObjectParameter("VRS_LOG", vRS_LOG), New ObjectParameter("VRS_LOG", GetType(String)))

        Dim vRS_SEQParameter As ObjectParameter = If(vRS_SEQ IsNot Nothing, New ObjectParameter("VRS_SEQ", vRS_SEQ), New ObjectParameter("VRS_SEQ", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("PRC_INS_TST_RPRT", lB_BNCParameter, cD_OPRTParameter, cD_PRDTParameter, nM_OFParameter, nM_NSParameter, lB_SNCTParameter, lB_MDParameter, vRS_LOGParameter, vRS_SEQParameter, [eRROR], iD_RPRT)
    End Function

    Public Overridable Function PRC_INS_TST_VAL(lB_BNC As String, cD_OPRT As String, cD_PRDT As String, nM_OF As String, nM_NS As String, lB_NM_MSR As String, vAL_LIM_BS As String, vAL As String, vAL_LIM_HT As String, cH_VAL As String, tU As String, tT As String, vRS_LOG As String, vRS_SEQ As String, iD_RPRT As Nullable(Of Long), [eRROR] As ObjectParameter) As Integer
        Dim lB_BNCParameter As ObjectParameter = If(lB_BNC IsNot Nothing, New ObjectParameter("LB_BNC", lB_BNC), New ObjectParameter("LB_BNC", GetType(String)))

        Dim cD_OPRTParameter As ObjectParameter = If(cD_OPRT IsNot Nothing, New ObjectParameter("CD_OPRT", cD_OPRT), New ObjectParameter("CD_OPRT", GetType(String)))

        Dim cD_PRDTParameter As ObjectParameter = If(cD_PRDT IsNot Nothing, New ObjectParameter("CD_PRDT", cD_PRDT), New ObjectParameter("CD_PRDT", GetType(String)))

        Dim nM_OFParameter As ObjectParameter = If(nM_OF IsNot Nothing, New ObjectParameter("NM_OF", nM_OF), New ObjectParameter("NM_OF", GetType(String)))

        Dim nM_NSParameter As ObjectParameter = If(nM_NS IsNot Nothing, New ObjectParameter("NM_NS", nM_NS), New ObjectParameter("NM_NS", GetType(String)))

        Dim lB_NM_MSRParameter As ObjectParameter = If(lB_NM_MSR IsNot Nothing, New ObjectParameter("LB_NM_MSR", lB_NM_MSR), New ObjectParameter("LB_NM_MSR", GetType(String)))

        Dim vAL_LIM_BSParameter As ObjectParameter = If(vAL_LIM_BS IsNot Nothing, New ObjectParameter("VAL_LIM_BS", vAL_LIM_BS), New ObjectParameter("VAL_LIM_BS", GetType(String)))

        Dim vALParameter As ObjectParameter = If(vAL IsNot Nothing, New ObjectParameter("VAL", vAL), New ObjectParameter("VAL", GetType(String)))

        Dim vAL_LIM_HTParameter As ObjectParameter = If(vAL_LIM_HT IsNot Nothing, New ObjectParameter("VAL_LIM_HT", vAL_LIM_HT), New ObjectParameter("VAL_LIM_HT", GetType(String)))

        Dim cH_VALParameter As ObjectParameter = If(cH_VAL IsNot Nothing, New ObjectParameter("CH_VAL", cH_VAL), New ObjectParameter("CH_VAL", GetType(String)))

        Dim tUParameter As ObjectParameter = If(tU IsNot Nothing, New ObjectParameter("TU", tU), New ObjectParameter("TU", GetType(String)))

        Dim tTParameter As ObjectParameter = If(tT IsNot Nothing, New ObjectParameter("TT", tT), New ObjectParameter("TT", GetType(String)))

        Dim vRS_LOGParameter As ObjectParameter = If(vRS_LOG IsNot Nothing, New ObjectParameter("VRS_LOG", vRS_LOG), New ObjectParameter("VRS_LOG", GetType(String)))

        Dim vRS_SEQParameter As ObjectParameter = If(vRS_SEQ IsNot Nothing, New ObjectParameter("VRS_SEQ", vRS_SEQ), New ObjectParameter("VRS_SEQ", GetType(String)))

        Dim iD_RPRTParameter As ObjectParameter = If(iD_RPRT.HasValue, New ObjectParameter("ID_RPRT", iD_RPRT), New ObjectParameter("ID_RPRT", GetType(Long)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("PRC_INS_TST_VAL", lB_BNCParameter, cD_OPRTParameter, cD_PRDTParameter, nM_OFParameter, nM_NSParameter, lB_NM_MSRParameter, vAL_LIM_BSParameter, vALParameter, vAL_LIM_HTParameter, cH_VALParameter, tUParameter, tTParameter, vRS_LOGParameter, vRS_SEQParameter, iD_RPRTParameter, [eRROR])
    End Function

    Public Overridable Function PRC_LST_MDP() As ObjectResult(Of String)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of String)("PRC_LST_MDP")
    End Function

    Public Overridable Function PRC_LST_PCB_OF(nM_OF As Nullable(Of Integer)) As ObjectResult(Of PRC_LST_PCB_OF_Result)
        Dim nM_OFParameter As ObjectParameter = If(nM_OF.HasValue, New ObjectParameter("NM_OF", nM_OF), New ObjectParameter("NM_OF", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of PRC_LST_PCB_OF_Result)("PRC_LST_PCB_OF", nM_OFParameter)
    End Function

    Public Overridable Function PRC_LST_PSG_OF_ETP([oF] As String, etape As String) As ObjectResult(Of String)
        Dim oFParameter As ObjectParameter = If([oF] IsNot Nothing, New ObjectParameter("OF", [oF]), New ObjectParameter("OF", GetType(String)))

        Dim etapeParameter As ObjectParameter = If(etape IsNot Nothing, New ObjectParameter("Etape", etape), New ObjectParameter("Etape", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of String)("PRC_LST_PSG_OF_ETP", oFParameter, etapeParameter)
    End Function

    Public Overridable Function PRC_LST_SENS_TO_ENS(nM_NS_EOL As String) As ObjectResult(Of PRC_LST_SENS_TO_ENS_Result)
        Dim nM_NS_EOLParameter As ObjectParameter = If(nM_NS_EOL IsNot Nothing, New ObjectParameter("NM_NS_EOL", nM_NS_EOL), New ObjectParameter("NM_NS_EOL", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of PRC_LST_SENS_TO_ENS_Result)("PRC_LST_SENS_TO_ENS", nM_NS_EOLParameter)
    End Function

    Public Overridable Function PRC_MAJ_TST_RPRT(iD_RPRT As Nullable(Of Long), lB_SNCT As String, [eRROR] As ObjectParameter) As Integer
        Dim iD_RPRTParameter As ObjectParameter = If(iD_RPRT.HasValue, New ObjectParameter("ID_RPRT", iD_RPRT), New ObjectParameter("ID_RPRT", GetType(Long)))

        Dim lB_SNCTParameter As ObjectParameter = If(lB_SNCT IsNot Nothing, New ObjectParameter("LB_SNCT", lB_SNCT), New ObjectParameter("LB_SNCT", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("PRC_MAJ_TST_RPRT", iD_RPRTParameter, lB_SNCTParameter, [eRROR])
    End Function

    Public Overridable Function PRC_NEOD_EXTR_NS_ASSOC(nM_NS As String, nM_ASSOC As ObjectParameter) As Integer
        Dim nM_NSParameter As ObjectParameter = If(nM_NS IsNot Nothing, New ObjectParameter("NM_NS", nM_NS), New ObjectParameter("NM_NS", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("PRC_NEOD_EXTR_NS_ASSOC", nM_NSParameter, nM_ASSOC)
    End Function

    Public Overridable Function PRC_NEOD_EXTR_NS_ASSOC_2(nS As String, cD_PRDT As String, nM_ASSOC As ObjectParameter) As Integer
        Dim nSParameter As ObjectParameter = If(nS IsNot Nothing, New ObjectParameter("NS", nS), New ObjectParameter("NS", GetType(String)))

        Dim cD_PRDTParameter As ObjectParameter = If(cD_PRDT IsNot Nothing, New ObjectParameter("CD_PRDT", cD_PRDT), New ObjectParameter("CD_PRDT", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("PRC_NEOD_EXTR_NS_ASSOC_2", nSParameter, cD_PRDTParameter, nM_ASSOC)
    End Function

    Public Overridable Function PRC_NEOD_EXTR_NS_ASSOC_3(nS As String, cD_PROD As String, nM_ASSOC As ObjectParameter) As Integer
        Dim nSParameter As ObjectParameter = If(nS IsNot Nothing, New ObjectParameter("NS", nS), New ObjectParameter("NS", GetType(String)))

        Dim cD_PRODParameter As ObjectParameter = If(cD_PROD IsNot Nothing, New ObjectParameter("CD_PROD", cD_PROD), New ObjectParameter("CD_PROD", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("PRC_NEOD_EXTR_NS_ASSOC_3", nSParameter, cD_PRODParameter, nM_ASSOC)
    End Function

    Public Overridable Function PRC_PST_IMPR(lB_PST As String, lB_IMPR As ObjectParameter) As Integer
        Dim lB_PSTParameter As ObjectParameter = If(lB_PST IsNot Nothing, New ObjectParameter("LB_PST", lB_PST), New ObjectParameter("LB_PST", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("PRC_PST_IMPR", lB_PSTParameter, lB_IMPR)
    End Function

    Public Overridable Function PRC_VERIF_DBL_PCB_NS(nM_OF As Nullable(Of Integer), nM_NS_EOL As String, dBL As ObjectParameter) As ObjectResult(Of PRC_VERIF_DBL_PCB_NS_Result)
        Dim nM_OFParameter As ObjectParameter = If(nM_OF.HasValue, New ObjectParameter("NM_OF", nM_OF), New ObjectParameter("NM_OF", GetType(Integer)))

        Dim nM_NS_EOLParameter As ObjectParameter = If(nM_NS_EOL IsNot Nothing, New ObjectParameter("NM_NS_EOL", nM_NS_EOL), New ObjectParameter("NM_NS_EOL", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of PRC_VERIF_DBL_PCB_NS_Result)("PRC_VERIF_DBL_PCB_NS", nM_OFParameter, nM_NS_EOLParameter, dBL)
    End Function

    Public Overridable Function PRC_VERIF_DBLN_NS_SENS(nM_SAP_CPT As String, nM_NS_SENS As String, result As ObjectParameter) As Integer
        Dim nM_SAP_CPTParameter As ObjectParameter = If(nM_SAP_CPT IsNot Nothing, New ObjectParameter("NM_SAP_CPT", nM_SAP_CPT), New ObjectParameter("NM_SAP_CPT", GetType(String)))

        Dim nM_NS_SENSParameter As ObjectParameter = If(nM_NS_SENS IsNot Nothing, New ObjectParameter("NM_NS_SENS", nM_NS_SENS), New ObjectParameter("NM_NS_SENS", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("PRC_VERIF_DBLN_NS_SENS", nM_SAP_CPTParameter, nM_NS_SENSParameter, result)
    End Function

    Public Overridable Function SUP_TMP_PST_NMCL(poste As String) As Integer
        Dim posteParameter As ObjectParameter = If(poste IsNot Nothing, New ObjectParameter("Poste", poste), New ObjectParameter("Poste", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SUP_TMP_PST_NMCL", posteParameter)
    End Function

    Public Overridable Function SUP_TMP_PST_OUTI(poste As String) As Integer
        Dim posteParameter As ObjectParameter = If(poste IsNot Nothing, New ObjectParameter("Poste", poste), New ObjectParameter("Poste", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SUP_TMP_PST_OUTI", posteParameter)
    End Function

    Public Overridable Function Supprimer_Gestion_Conteneur(n_gestion As Nullable(Of Integer)) As Integer
        Dim n_gestionParameter As ObjectParameter = If(n_gestion.HasValue, New ObjectParameter("N_gestion", n_gestion), New ObjectParameter("N_gestion", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("Supprimer_Gestion_Conteneur", n_gestionParameter)
    End Function

    Public Overridable Function TMP_NB_CRT_FLAN(lB_PST As String, result As ObjectParameter) As Integer
        Dim lB_PSTParameter As ObjectParameter = If(lB_PST IsNot Nothing, New ObjectParameter("LB_PST", lB_PST), New ObjectParameter("LB_PST", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("TMP_NB_CRT_FLAN", lB_PSTParameter, result)
    End Function

    Public Overridable Function WorkFlow_NS_EOL(nS_EOL As String, etape As String, article As String) As ObjectResult(Of WorkFlow_NS_EOL_Result)
        Dim nS_EOLParameter As ObjectParameter = If(nS_EOL IsNot Nothing, New ObjectParameter("NS_EOL", nS_EOL), New ObjectParameter("NS_EOL", GetType(String)))

        Dim etapeParameter As ObjectParameter = If(etape IsNot Nothing, New ObjectParameter("Etape", etape), New ObjectParameter("Etape", GetType(String)))

        Dim articleParameter As ObjectParameter = If(article IsNot Nothing, New ObjectParameter("Article", article), New ObjectParameter("Article", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of WorkFlow_NS_EOL_Result)("WorkFlow_NS_EOL", nS_EOLParameter, etapeParameter, articleParameter)
    End Function

    Public Overridable Function WorkFlow_PDT(article As String) As ObjectResult(Of WorkFlow_PDT_Result)
        Dim articleParameter As ObjectParameter = If(article IsNot Nothing, New ObjectParameter("Article", article), New ObjectParameter("Article", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of WorkFlow_PDT_Result)("WorkFlow_PDT", articleParameter)
    End Function

    <DbFunction("MES_Digital_FactoryEntities", "bilanSemaineEtLivraisonIndicateurVendom")>
    Public Overridable Function bilanSemaineEtLivraisonIndicateurVendom(p_Num_OF As Nullable(Of Integer), p_Num_article As String, p_date_deb_analyse As String, p_date_fin_analyse As String) As IQueryable(Of bilanSemaineEtLivraisonIndicateurVendom_Result)
        Dim p_Num_OFParameter As ObjectParameter = If(p_Num_OF.HasValue, New ObjectParameter("p_Num_OF", p_Num_OF), New ObjectParameter("p_Num_OF", GetType(Integer)))

        Dim p_Num_articleParameter As ObjectParameter = If(p_Num_article IsNot Nothing, New ObjectParameter("p_Num_article", p_Num_article), New ObjectParameter("p_Num_article", GetType(String)))

        Dim p_date_deb_analyseParameter As ObjectParameter = If(p_date_deb_analyse IsNot Nothing, New ObjectParameter("p_date_deb_analyse", p_date_deb_analyse), New ObjectParameter("p_date_deb_analyse", GetType(String)))

        Dim p_date_fin_analyseParameter As ObjectParameter = If(p_date_fin_analyse IsNot Nothing, New ObjectParameter("p_date_fin_analyse", p_date_fin_analyse), New ObjectParameter("p_date_fin_analyse", GetType(String)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of bilanSemaineEtLivraisonIndicateurVendom_Result)("[MES_Digital_FactoryEntities].[bilanSemaineEtLivraisonIndicateurVendom](@p_Num_OF, @p_Num_article, @p_date_deb_analyse, @p_date_fin_analyse)", p_Num_OFParameter, p_Num_articleParameter, p_date_deb_analyseParameter, p_date_fin_analyseParameter)
    End Function

    Public Overridable Function P_ATBT_ADRE_MAC(nM_CRIT As String, nU_SER As String, nM_TYPE As String, nU_ADRE_MAC As ObjectParameter, rESULT As ObjectParameter) As ObjectResult(Of String)
        Dim nM_CRITParameter As ObjectParameter = If(nM_CRIT IsNot Nothing, New ObjectParameter("NM_CRIT", nM_CRIT), New ObjectParameter("NM_CRIT", GetType(String)))

        Dim nU_SERParameter As ObjectParameter = If(nU_SER IsNot Nothing, New ObjectParameter("NU_SER", nU_SER), New ObjectParameter("NU_SER", GetType(String)))

        Dim nM_TYPEParameter As ObjectParameter = If(nM_TYPE IsNot Nothing, New ObjectParameter("NM_TYPE", nM_TYPE), New ObjectParameter("NM_TYPE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of String)("P_ATBT_ADRE_MAC", nM_CRITParameter, nU_SERParameter, nM_TYPEParameter, nU_ADRE_MAC, rESULT)
    End Function

    Public Overridable Function P_GET_ADRE_MAC(nM_CRIT As String, nU_SER As String, nM_TYPE As String, nU_ADRE_MAC As ObjectParameter, dT_CREA As ObjectParameter, rESULT As ObjectParameter) As Integer
        Dim nM_CRITParameter As ObjectParameter = If(nM_CRIT IsNot Nothing, New ObjectParameter("NM_CRIT", nM_CRIT), New ObjectParameter("NM_CRIT", GetType(String)))

        Dim nU_SERParameter As ObjectParameter = If(nU_SER IsNot Nothing, New ObjectParameter("NU_SER", nU_SER), New ObjectParameter("NU_SER", GetType(String)))

        Dim nM_TYPEParameter As ObjectParameter = If(nM_TYPE IsNot Nothing, New ObjectParameter("NM_TYPE", nM_TYPE), New ObjectParameter("NM_TYPE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("P_GET_ADRE_MAC", nM_CRITParameter, nU_SERParameter, nM_TYPEParameter, nU_ADRE_MAC, dT_CREA, rESULT)
    End Function

    Public Overridable Function P_LIST_ADRE_MAC_DPNB(nM_CRIT As String, nB_ADRE_MAC_DPNB As ObjectParameter, rESULT As ObjectParameter) As ObjectResult(Of String)
        Dim nM_CRITParameter As ObjectParameter = If(nM_CRIT IsNot Nothing, New ObjectParameter("NM_CRIT", nM_CRIT), New ObjectParameter("NM_CRIT", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of String)("P_LIST_ADRE_MAC_DPNB", nM_CRITParameter, nB_ADRE_MAC_DPNB, rESULT)
    End Function

    Public Overridable Function P_TAE_PASS_WF(nU_SER As String, nM_OPRT As String, rES As ObjectParameter) As Integer
        Dim nU_SERParameter As ObjectParameter = If(nU_SER IsNot Nothing, New ObjectParameter("NU_SER", nU_SER), New ObjectParameter("NU_SER", GetType(String)))

        Dim nM_OPRTParameter As ObjectParameter = If(nM_OPRT IsNot Nothing, New ObjectParameter("NM_OPRT", nM_OPRT), New ObjectParameter("NM_OPRT", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("P_TAE_PASS_WF", nU_SERParameter, nM_OPRTParameter, rES)
    End Function

    <DbFunction("MES_Digital_FactoryEntities", "paretoControlesIndicateurVendom")>
    Public Overridable Function paretoControlesIndicateurVendom(p_Num_OF As Nullable(Of Integer), p_Num_article As String, p_date_deb_analyse As String, p_date_fin_analyse As String, p_type_controle As String) As IQueryable(Of paretoControlesIndicateurVendom_Result)
        Dim p_Num_OFParameter As ObjectParameter = If(p_Num_OF.HasValue, New ObjectParameter("p_Num_OF", p_Num_OF), New ObjectParameter("p_Num_OF", GetType(Integer)))

        Dim p_Num_articleParameter As ObjectParameter = If(p_Num_article IsNot Nothing, New ObjectParameter("p_Num_article", p_Num_article), New ObjectParameter("p_Num_article", GetType(String)))

        Dim p_date_deb_analyseParameter As ObjectParameter = If(p_date_deb_analyse IsNot Nothing, New ObjectParameter("p_date_deb_analyse", p_date_deb_analyse), New ObjectParameter("p_date_deb_analyse", GetType(String)))

        Dim p_date_fin_analyseParameter As ObjectParameter = If(p_date_fin_analyse IsNot Nothing, New ObjectParameter("p_date_fin_analyse", p_date_fin_analyse), New ObjectParameter("p_date_fin_analyse", GetType(String)))

        Dim p_type_controleParameter As ObjectParameter = If(p_type_controle IsNot Nothing, New ObjectParameter("p_type_controle", p_type_controle), New ObjectParameter("p_type_controle", GetType(String)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of paretoControlesIndicateurVendom_Result)("[MES_Digital_FactoryEntities].[paretoControlesIndicateurVendom](@p_Num_OF, @p_Num_article, @p_date_deb_analyse, @p_date_fin_analyse, @p_type_controle)", p_Num_OFParameter, p_Num_articleParameter, p_date_deb_analyseParameter, p_date_fin_analyseParameter, p_type_controleParameter)
    End Function

    <DbFunction("MES_Digital_FactoryEntities", "pdts_Test_Controles_IndicateurVendom")>
    Public Overridable Function pdts_Test_Controles_IndicateurVendom(p_indicSource As Nullable(Of Boolean), p_Num_OF As Nullable(Of Integer), p_Num_article As String, p_date_deb_analyse As String, p_date_fin_analyse As String, p_type_controle As String) As IQueryable(Of pdts_Test_Controles_IndicateurVendom_Result)
        Dim p_indicSourceParameter As ObjectParameter = If(p_indicSource.HasValue, New ObjectParameter("p_indicSource", p_indicSource), New ObjectParameter("p_indicSource", GetType(Boolean)))

        Dim p_Num_OFParameter As ObjectParameter = If(p_Num_OF.HasValue, New ObjectParameter("p_Num_OF", p_Num_OF), New ObjectParameter("p_Num_OF", GetType(Integer)))

        Dim p_Num_articleParameter As ObjectParameter = If(p_Num_article IsNot Nothing, New ObjectParameter("p_Num_article", p_Num_article), New ObjectParameter("p_Num_article", GetType(String)))

        Dim p_date_deb_analyseParameter As ObjectParameter = If(p_date_deb_analyse IsNot Nothing, New ObjectParameter("p_date_deb_analyse", p_date_deb_analyse), New ObjectParameter("p_date_deb_analyse", GetType(String)))

        Dim p_date_fin_analyseParameter As ObjectParameter = If(p_date_fin_analyse IsNot Nothing, New ObjectParameter("p_date_fin_analyse", p_date_fin_analyse), New ObjectParameter("p_date_fin_analyse", GetType(String)))

        Dim p_type_controleParameter As ObjectParameter = If(p_type_controle IsNot Nothing, New ObjectParameter("p_type_controle", p_type_controle), New ObjectParameter("p_type_controle", GetType(String)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of pdts_Test_Controles_IndicateurVendom_Result)("[MES_Digital_FactoryEntities].[pdts_Test_Controles_IndicateurVendom](@p_indicSource, @p_Num_OF, @p_Num_article, @p_date_deb_analyse, @p_date_fin_analyse, @p_type_controle)", p_indicSourceParameter, p_Num_OFParameter, p_Num_articleParameter, p_date_deb_analyseParameter, p_date_fin_analyseParameter, p_type_controleParameter)
    End Function

    Public Overridable Function sp_alterdiagram(diagramname As String, owner_id As Nullable(Of Integer), version As Nullable(Of Integer), definition As Byte()) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Dim versionParameter As ObjectParameter = If(version.HasValue, New ObjectParameter("version", version), New ObjectParameter("version", GetType(Integer)))

        Dim definitionParameter As ObjectParameter = If(definition IsNot Nothing, New ObjectParameter("definition", definition), New ObjectParameter("definition", GetType(Byte())))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter)
    End Function

    Public Overridable Function sp_creatediagram(diagramname As String, owner_id As Nullable(Of Integer), version As Nullable(Of Integer), definition As Byte()) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Dim versionParameter As ObjectParameter = If(version.HasValue, New ObjectParameter("version", version), New ObjectParameter("version", GetType(Integer)))

        Dim definitionParameter As ObjectParameter = If(definition IsNot Nothing, New ObjectParameter("definition", definition), New ObjectParameter("definition", GetType(Byte())))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter)
    End Function

    Public Overridable Function sp_dropdiagram(diagramname As String, owner_id As Nullable(Of Integer)) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter)
    End Function

    Public Overridable Function sp_helpdiagramdefinition(diagramname As String, owner_id As Nullable(Of Integer)) As ObjectResult(Of sp_helpdiagramdefinition_Result)
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of sp_helpdiagramdefinition_Result)("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter)
    End Function

    Public Overridable Function sp_helpdiagrams(diagramname As String, owner_id As Nullable(Of Integer)) As ObjectResult(Of sp_helpdiagrams_Result)
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of sp_helpdiagrams_Result)("sp_helpdiagrams", diagramnameParameter, owner_idParameter)
    End Function

    Public Overridable Function sp_renamediagram(diagramname As String, owner_id As Nullable(Of Integer), new_diagramname As String) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Dim new_diagramnameParameter As ObjectParameter = If(new_diagramname IsNot Nothing, New ObjectParameter("new_diagramname", new_diagramname), New ObjectParameter("new_diagramname", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter)
    End Function

    Public Overridable Function sp_upgraddiagrams() As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_upgraddiagrams")
    End Function

End Class
